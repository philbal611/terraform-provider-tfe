---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_workspace_setting"
description: |-
  Manages workspace settings.
---


<!-- Please do not edit this file, it is generated. -->
# tfe_workspace_settings

Manages or reads execution mode and agent pool settings for a workspace. This also interacts with the organization's default values for several settings, which can be managed with [tfe_organization_default_settings](organization_default_settings.html). If other resources need to identify whether a setting is a default or an explicit value set for the workspace, you can refer to the read-only `overwrites` argument.

## Example Usage

Basic usage:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Organization } from "./.gen/providers/tfe/organization";
import { Workspace } from "./.gen/providers/tfe/workspace";
import { WorkspaceSettings } from "./.gen/providers/tfe/workspace-settings";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testOrganization = new Organization(this, "test-organization", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const test = new Workspace(this, "test", {
      name: "my-workspace-name",
      organization: testOrganization.name,
    });
    new WorkspaceSettings(this, "test-settings", {
      executionMode: "local",
      workspaceId: test.id,
    });
  }
}

```

With `executionMode` of `agent`:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AgentPool } from "./.gen/providers/tfe/agent-pool";
import { AgentPoolAllowedWorkspaces } from "./.gen/providers/tfe/agent-pool-allowed-workspaces";
import { Organization } from "./.gen/providers/tfe/organization";
import { Workspace } from "./.gen/providers/tfe/workspace";
import { WorkspaceSettings } from "./.gen/providers/tfe/workspace-settings";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testOrganization = new Organization(this, "test-organization", {
      email: "admin@company.com",
      name: "my-org-name",
    });
    const test = new Workspace(this, "test", {
      name: "my-workspace-name",
      organization: testOrganization.name,
    });
    const testAgentPool = new AgentPool(this, "test-agent-pool", {
      name: "my-agent-pool-name",
      organization: testOrganization.name,
    });
    const tfeAgentPoolAllowedWorkspacesTest = new AgentPoolAllowedWorkspaces(
      this,
      "test_3",
      {
        agentPoolId: testAgentPool.id,
        allowedWorkspaceIds: [test.id],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeAgentPoolAllowedWorkspacesTest.overrideLogicalId("test");
    new WorkspaceSettings(this, "test-settings", {
      agentPoolId: testAgentPool.id,
      executionMode: "agent",
      workspaceId: test.id,
    });
  }
}

```

This resource may be used as a data source when no optional arguments are defined:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformOutput, Op, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataTfeWorkspace } from "./.gen/providers/tfe/data-tfe-workspace";
import { WorkspaceSettings } from "./.gen/providers/tfe/workspace-settings";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new DataTfeWorkspace(this, "test", {
      name: "my-workspace-name",
      organization: "my-org-name",
    });
    const tfeWorkspaceSettingsTest = new WorkspaceSettings(this, "test_1", {
      workspaceId: Token.asString(test.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tfeWorkspaceSettingsTest.overrideLogicalId("test");
    new TerraformOutput(this, "workspace-explicit-local-execution", {
      value: Fn.alltrue(
        Token.asAny([
          Op.eq(tfeWorkspaceSettingsTest.executionMode, "local"),
          Fn.lookupNested(tfeWorkspaceSettingsTest.overwrites, [
            "0",
            '"execution_mode"',
          ]),
        ])
      ),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `workspaceId` - (Required) ID of the workspace.
* `agentPoolId` - (Optional) The ID of an agent pool to assign to the workspace. Requires `execution_mode`
  to be set to `agent`. This value _must not_ be provided if `execution_mode` is set to any other value.
* `executionMode` - (Optional) Which [execution mode](https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings#execution-mode)
  to use. Using Terraform Cloud, valid values are `remote`, `local` or `agent`. Using Terraform Enterprise, only `remote` and `local` execution modes are valid. When set to `local`, the workspace will be used for state storage only. **Important:** If you omit this attribute, the resource configures the workspace to use your organization's default execution mode (which in turn defaults to `remote`), removing any explicit value that might have previously been set for the workspace.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The workspace ID.
* `overwrites` - Can be used to check whether a setting is currently inheriting its value from another resource.
  - `execution_mode` - Set to `true` if the execution mode of the workspace is being determined by the setting on the workspace itself. It will be `false` if the execution mode is inherited from another resource (e.g. the organization's default execution mode)
  - `agent_pool` - Set to `true` if the agent pool of the workspace is being determined by the setting on the workspace itself. It will be `false` if the agent pool is inherited from another resource (e.g. the organization's default agent pool)

## Import

Workspaces can be imported; use `<WORKSPACE ID>` or `<ORGANIZATION NAME>/<WORKSPACE NAME>` as the
import ID. For example:

```shell
terraform import tfe_workspace_settings.test ws-CH5in3chf8RJjrVd
```

```shell
terraform import tfe_workspace_settings.test my-org-name/my-wkspace-name
```

<!-- cache-key: cdktf-0.19.0 input-9b7213e3f3430e82b75a7c71909f07742b81d886b2bb9c0f527258ec71436d66 -->