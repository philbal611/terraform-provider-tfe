---
layout: "tfe"
page_title: "Terraform Enterprise: tfe_registry_module"
description: |-
  Manages registry modules
---


<!-- Please do not edit this file, it is generated. -->
# tfe_registry_module

Terraform Cloud's private module registry helps you share Terraform modules across your organization.

## Example Usage

Basic usage with VCS:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_test_organization = tfe.organization.Organization(self, "test-organization",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_oauth_client_test_oauth_client = tfe.oauth_client.OauthClient(self, "test-oauth-client",
            api_url="https://api.github.com",
            http_url="https://github.com",
            oauth_token="my-vcs-provider-token",
            organization=cdktf.Token.as_string(tfe_organization_test_organization.name),
            service_provider="github"
        )
        tfe.registry_module.RegistryModule(self, "test-registry-module",
            vcs_repo=RegistryModuleVcsRepo(
                display_identifier="my-org-name/terraform-provider-name",
                identifier="my-org-name/terraform-provider-name",
                oauth_token_id=cdktf.Token.as_string(tfe_oauth_client_test_oauth_client.oauth_token_id)
            )
        )
```

Create private registry module with GitHub App:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_test_organization = tfe.organization.Organization(self, "test-organization",
            email="admin@company.com",
            name="my-org-name"
        )
        data_tfe_github_app_installation_gha_installation =
        tfe.data_tfe_github_app_installation.DataTfeGithubAppInstallation(self, "gha_installation",
            name="YOUR_GH_NAME"
        )
        tfe.registry_module.RegistryModule(self, "petstore",
            organization=cdktf.Token.as_string(tfe_organization_test_organization.name),
            vcs_repo=RegistryModuleVcsRepo(
                display_identifier="GH_NAME/REPO_NAME",
                github_app_installation_id=cdktf.Token.as_string(data_tfe_github_app_installation_gha_installation.id),
                identifier="GH_NAME/REPO_NAME"
            )
        )
```

Create private registry module without VCS:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_test_organization = tfe.organization.Organization(self, "test-organization",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe.registry_module.RegistryModule(self, "test-private-registry-module",
            module_provider="my_provider",
            name="another_test_module",
            organization=cdktf.Token.as_string(tfe_organization_test_organization.name),
            registry_name="private"
        )
```

Create public registry module:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_test_organization = tfe.organization.Organization(self, "test-organization",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe.registry_module.RegistryModule(self, "test-public-registry-module",
            module_provider="aws",
            name="vpc",
            namespace="terraform-aws-modules",
            organization=cdktf.Token.as_string(tfe_organization_test_organization.name),
            registry_name="public"
        )
```

Create no-code provisioning registry module:

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.tfe as tfe
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tfe_organization_test_organization = tfe.organization.Organization(self, "test-organization",
            email="admin@company.com",
            name="my-org-name"
        )
        tfe_registry_module_test_no_code_provisioning_registry_module =
        tfe.registry_module.RegistryModule(self, "test-no-code-provisioning-registry-module",
            module_provider="aws",
            name="vpc",
            namespace="terraform-aws-modules",
            organization=cdktf.Token.as_string(tfe_organization_test_organization.name),
            registry_name="public"
        )
        tfe.no_code_module.NoCodeModule(self, "foobar",
            organization=cdktf.Token.as_string(tfe_organization_test_organization.id),
            registry_module=cdktf.Token.as_string(tfe_registry_module_test_no_code_provisioning_registry_module.id)
        )
```

## Argument Reference

The following arguments are supported:

* `vcs_repo` - (Optional) Settings for the registry module's VCS repository. Forces a
  new resource if changed. One of `vcs_repo` or `module_provider` is required.
* `module_provider` - (Optional) Specifies the Terraform provider that this module is used for. For example, "aws"
* `name` - (Optional) The name of registry module. It must be set if `module_provider` is used.
* `organization` - (Optional) The name of the organization associated with the registry module. It must be set if `module_provider` is used, or if `vcs_repo` is used via a GitHub App.
* `namespace` - (Optional) The namespace of a public registry module. It can be used if `module_provider` is set and `registry_name` is public.
* `registry_name` - (Optional) Whether the registry module is private or public. It can be used if `module_provider` is set.

The `vcs_repo` block supports:

* `display_identifier` - (Required) The display identifier for your VCS repository.
  For most VCS providers outside of BitBucket Cloud and Azure DevOps, this will match the `identifier`
  string.
* `identifier` - (Required) A reference to your VCS repository in the format
  `<organization>/<repository>` where `<organization>` and `<repository>` refer to the organization (or project key, for Bitbucket Server)
  and repository in your VCS provider. The format for Azure DevOps is `<ado organization>/<ado project>/_git/<ado repository>`.
* `oauth_token_id` - (Optional) Token ID of the VCS Connection (OAuth Connection Token) to use. This conflicts with `github_app_installation_id` and can only be used if `github_app_installation_id` is not used.
* `github_app_installation_id` - (Optional) The installation id of the Github App. This conflicts with `oauth_token_id` and can only be used if `oauth_token_id` is not used.

## Attributes Reference

* `id` - The ID of the registry module.
* `module_provider` - The Terraform provider that this module is used for.
* `name` - The name of registry module.
* `organization` - The name of the organization associated with the registry module.
* `namespace` - The namespace of the module. For private modules this is the name of the organization that owns the module.
* `registry_name` - The registry name of the registry module depicting whether the registry module is private or public.
* `no_code` - **Deprecated** The property that will enable or disable a module as no-code provisioning ready.
Use the tfe_no_code_module resource instead.

## Import

Registry modules can be imported; use `<ORGANIZATION>/<REGISTRY_NAME>/<NAMESPACE>/<REGISTRY MODULE NAME>/<REGISTRY MODULE PROVIDER>/<REGISTRY MODULE ID>` as the import ID. For example:

```shell
terraform import tfe_registry_module.test my-org-name/public/namespace/name/provider/mod-qV9JnKRkmtMa4zcA
```

**Deprecated** use `<ORGANIZATION NAME>/<REGISTRY MODULE NAME>/<REGISTRY MODULE PROVIDER>/<REGISTRY MODULE ID>` as the import ID. For example:

```shell
terraform import tfe_registry_module.test my-org-name/name/provider/mod-qV9JnKRkmtMa4zcA
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d0184f94e79f432f50dea11aef3a9b7449006807fb197c05220e48a2f1f3f71e -->